import java.util.Comparator;

import components.map.Map;
import components.map.Map.Pair;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Lughan Ross
 *
 */
public final class WordCount {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private WordCount() {
    }

    /**
     * Put a short phrase describing the static method myMethod here. * @param
     * file SimpleWriter object representing the output HTML file.
     *
     * @param terms
     *            A queue containing the words in alphabetical order.
     * @param words
     *            A map containing the words and their frequency count. @ param
     * @param file
     *            SimpleWriter that was created
     */
    private static void hTML(SimpleWriter file, Queue<String> terms,
            Map<String, Integer> words) {
        SimpleReader in = new SimpleReader1L();
        file.println("<html>");
        file.println("<head>");
        file.println("<title>" + "Word Counted" + "</title>");
        file.println("</head>");
        file.println("<body>");
        file.println("<h2> " + "Words Counted in File" + "</h2>");
        file.println("<hr />");
        file.println("<table border=\"1\">");
        file.println("<tr>");
        file.println(" <th> Words </th> ");
        file.println(" <th> Counts </th>");
        file.println("</tr>");
        file.println("<tr>");
        for (String x : terms) {
            file.println("<td>" + x + "</td>");
            if (words.hasKey(x)) {
                file.println("<td>" + words.value(x) + "</td>");
            }
            file.println("</tr>");
        }

        file.println("</table>");
        file.println("</body>");
        file.println("</html>");

        // Close so it don't Leak
        file.close();
        in.close();
    }

    /**
     * Takes the keys (words) from the map and put them in a Queue. Once the
     * Queue is create it places them in alphabetical order.
     *
     * @param map
     *            The input map containing strings as keys and their frequency
     *            as values.
     * @return A Queue of words in alphabetical order.
     *
     *
     */
    private static Queue<String> word(Map<String, Integer> map) {
        Queue<String> terms = new Queue1L<String>();
        for (Pair<String, Integer> x : map) {
            terms.enqueue(x.key());

        }
        // Sort terms in alphabetical order
        terms.sort(new Comparator<String>() {
            @Override
            public int compare(String x, String y) {
                return x.compareToIgnoreCase(y);
            }
        });

        return terms;
    }

    /**
     *
     * This method reads each line from a given file and puts each word into a
     * map. If a word already exists in the map, its value (frequency) is
     * incremented by 1.
     *
     * @require SimpleReader to be open
     * @param in
     *            To be open
     * @return A map containing words as keys and their frequency as values.
     */

    private static Map<String, Integer> wordCounter(SimpleReader in) {
        // Create an empty map
        Map<String, Integer> map = new Map1L<String, Integer>();
        // Create a set to store separators (spaces)
        Set<Character> separators = new Set1L<>();
        separators.add(' ');
        while (!in.atEOS()) {
            // go through each character in the line
            int pos = 0;
            String line = in.nextLine();
            // go through each character in the line
            while (pos < line.length()) {
                String w = nextWordOrSeparator(line, pos, separators);
                pos += w.length();
                if (!separators.contains(w.charAt(0))) {

                    if (!map.hasKey(w)) {
                        map.add(w, 1);
                    } else if (map.hasKey(w)) {
                        map.replaceValue(w, map.value(w) + 1);
                    }
                }

            }
        }
        // Return the map of words and their frequency
        return map;
    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */

    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";
        // Initialize end to position
        int endpos = position;
        // Check if the current character is a separator
        boolean isSeparator = separators.contains(text.charAt(position));
        while (endpos < text.length()
                && separators.contains(text.charAt(endpos)) == isSeparator) {
            endpos++;
        }

        return text.substring(position, endpos);
    }

    /**
     * Alphabetizes the given terms in a queue.
     *
     * @param terms
     *            the given terms
     * @replaces term
     */

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter a file name: ");
        String fileName = in.nextLine();
        SimpleReader inputFile = new SimpleReader1L(fileName);
        out.print("Enter folder Name: ");
        String outputFile = in.nextLine();
        SimpleWriter output = new SimpleWriter1L(outputFile);
        // words stores the output of wordcounter
        Map<String, Integer> words = wordCounter(inputFile);
        // Then runs it through words method
        Queue<String> terms = word(words);
        // words and terms are then ran through html
        hTML(output, terms, words);
        in.close();
        out.close();

    }

}
