import java.util.Comparator;

import components.map.Map;
import components.map.Map.Pair;
import components.map.Map2;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.sortingmachine.SortingMachine;
import components.sortingmachine.SortingMachine1L;

/**
 * Counts word occurrences in any given input text file and outputs a formatted
 * HTML tag cloud file containing a user-defined number of the most common words
 * in alphabetical order.
 *
 * @author
 *
 */
public final class TagCloud {

    /**
     * No argument constructor--private to prevent instantiation.
     */
    private TagCloud() {
    }

    /**
     * Reports whether or not a given character is contained in the English
     * Alphabet.
     *
     * Used as a helper function only
     *
     * @param character
     *            the character being tested
     *
     * @return true, if the character is in the English Alphabet otherwise,
     *         false
     */
    public static boolean isEnglishLetter(char character) {
        boolean isEnglishLetter = false;

        if (('a' <= character && character <= 'z')
                || ('A' <= character && character <= 'Z')) {
            isEnglishLetter = true;
        }

        return isEnglishLetter;
    }

    /**
     * Reads in and returns the next word or separator-string from a given
     * string using a given set of separator characters. A word is defined as a
     * continuous string of English alphabet characters, while all other
     * characters are considered separator characters. A separator-string is
     * simply a string of separator characters.
     *
     * @param textString
     *            a given {@code StringBuilder} of text
     *
     * @requires the value of textString not be null
     *
     * @return textString[0,[|separator string or word|)
     */
    public static String nextWordOrSeparator(StringBuilder textString) {

        String wordOrSeparator = "";
        int endSeparatorIndex = 0;
        int endWordIndex = 0;

        if (textString.length() != 0) { // only extract from a non-empty string

            // extract separator string's ending index position
            while (endSeparatorIndex < textString.length() && !TagCloud
                    .isEnglishLetter(textString.charAt(endSeparatorIndex))) {
                endSeparatorIndex++;
            }

            // extract word string's ending index position
            while (endWordIndex < textString.length() && TagCloud
                    .isEnglishLetter(textString.charAt(endWordIndex))) {
                endWordIndex++;
            }

            // one of the index integers is 0, use the non zero to extract a word
            // or a separator

            if (endSeparatorIndex != 0) {
                wordOrSeparator = textString.substring(0, endSeparatorIndex);
            } else if (endWordIndex != 0) {
                wordOrSeparator = textString.substring(0, endWordIndex);
            }

        }

        return wordOrSeparator;

    }

    /**
     * Counts all words in a given text file, returning a {@code Map} whose keys
     * are each unique word and whose values are the number of times the word
     * appears in the file.
     *
     * note: A word is defined as a continuous string of English Alphabet
     * letters. Unique words are defined as unique combinations of English
     * Alphabet characters in a continuous string, ignoring case.
     *
     * @param textIn
     *            a SimpleReader object set up to read from a text file
     *
     * @requires textIn be open
     *
     * @return [a Map<String, Integer> whose keys are each unique word whose
     *         value is the number of times each word appears in the text]
     */
    public static Map<String, Integer> wordCountMap(SimpleReader textIn) {

        Map<String, Integer> wordCountMap = new Map2<>();
        Pair<String, Integer> mapEntry;
        StringBuilder textLine = new StringBuilder();
        String wordOrSeparator;

        while (!textIn.atEOS()) {
            textLine.append(textIn.nextLine());

            while (!textLine.isEmpty()) {
                // extract next word or separator out of current line
                wordOrSeparator = nextWordOrSeparator(textLine);

                // remove what was extracted from the line
                textLine.delete(0, wordOrSeparator.length());

                if (isEnglishLetter(wordOrSeparator.charAt(0))) {
                    // only if a word was extracted, count it
                    if (!wordCountMap.hasKey(wordOrSeparator.toLowerCase())) {
                        // if the word has not been seen yet, add to map
                        // ignore case when determining uniqueness of word
                        wordCountMap.add(wordOrSeparator.toLowerCase(), 1);
                    } else {
                        // if word has been seen before, update the count
                        mapEntry = wordCountMap.remove(wordOrSeparator);
                        wordCountMap.add(mapEntry.key(), mapEntry.value() + 1);
                    }
                }
            }
        }

        return wordCountMap;
    }

    /**
     * Fills and sorts a {@code SortingMachine} with the words in the
     * {@code Map} with the highest count values, capped at 100 words total.
     *
     * @param wordMap
     *            a Map of words and associated integer values
     *
     * @param sortedWords
     *            a {@code SortingMachine} to be populated with words.
     *
     * @param numberOfWords
     *            the number of words to be placed into sortedWords
     *
     * @param sortByCount
     *            a {@code SortingMachine} that sorts {@code Map.Pair}'s by
     *            count.
     *
     * @replaces sortedWords
     *
     * @clears sortByCount
     *
     * @requires the value of wordMap not be null and size(wordMap) >= 100 and
     *           sortByCount.machineOrder is a total preorder <= of the counts
     *           of each word, and both sortedWords and sortByCount are in
     *           insertion mode.
     *
     * @ensures [sortedWords contains <= 100 words, and not
     *          sortedWords.insertion_mode]
     */
    public static void sortedListOfWords(Map<String, Integer> wordMap,
            SortingMachine<String> sortedWords,
            SortingMachine<Map.Pair<String, Integer>> sortByCount,
            int numberOfWords) {

        sortedWords.clear();
        sortByCount.clear();

        // sort words by count to find the numberOfWords most frequent words
        while (wordMap.size() > 0) {
            sortByCount.add(wordMap.removeAny());
        }

        sortByCount.changeToExtractionMode();

        // put the numberOfWords most frequent words into sortedWords
        Map.Pair<String, Integer> pair;
        for (int i = 0; i < numberOfWords && sortByCount.size() > 0; i++) {
            pair = sortByCount.removeFirst();
            sortedWords.add(pair.key());

            // put the pair back into wordMap
            wordMap.add(pair.key(), pair.value());
        }

        // fully restore wordMap and sort words
        while (sortByCount.size() > 0) {
            pair = sortByCount.removeFirst();
            wordMap.add(pair.key(), pair.value());
        }
        sortedWords.changeToExtractionMode();
    }

    /**
     * Creates an HTML site using a {@code Map} of words paired with an integer,
     * and a {@code SortingMachine} of those words in alphabetical order, to
     * create a table on the HTML file of each word in alphabetical order and
     * it's count number.
     *
     * @param wordMap
     *            a {@code Map} of words and their appearance counts
     *
     * @param orderedWords
     *            a {@code SortingMachine} of sorted words
     *
     * @param fileOut
     *            a SimpleWriter object set up to print HTML code to the desired
     *            file
     *
     * @param filePath
     *            a String denoting the path to the file that the words in
     *            wordsInOrder and wordMap were extracted from
     *
     * @param numberOfWords
     *            the number of words to be printed into the tag cloud
     *
     * @requires the values of wordMap and wordsInOrder not be null, and that
     *           fileOut be open, and that sortedWords be in extraction mode
     *
     * @ensures a properly formatted HTML file is created containing a table of
     *          each word provided and it's appearance count number, ordered in
     *          alphabetical order
     */
    public static void createTag(Map<String, Integer> wordMap,
            SortingMachine<String> orderedWords, SimpleWriter fileOut,
            String filePath, int numberOfWords) {
        // CSS links
        String css1 = "http://web.cse.ohio-state.edu/software/2231/"
                + "web-sw2/assignments/projects/tag-cloud-generator/data/"
                + "tagcloud.css";
        String css2 = "tagcloud.css";

        // HTML file header
        fileOut.println("<!DOCTYPE html>");
        fileOut.println("<html>");
        fileOut.println("  " + "<head>");
        fileOut.println("  " + "  " + "<title>" + "Top " + numberOfWords
                + " words in " + filePath + "</title>");
        fileOut.println("  " + "  " + "<link href=\"" + css1
                + "\" rel = \"stylesheet\" type = \"text/css\">");
        fileOut.println("  " + "  " + "<link href=\"" + css2
                + "\" rel = \"stylesheet\" type = \"text/sss\">");
        fileOut.println("  " + "</head>");
        fileOut.println("  " + "<body>");
        fileOut.println("  " + "  " + "<h2>" + "Top " + numberOfWords
                + " words in " + filePath + "</h2>");
        fileOut.println("  " + "  " + "  " + "<hr><div class=\"cdiv\">");
        fileOut.println("  " + "  " + "  " + "<p class=\"cbox\">");

        int maxCount = 0;
        int minCount = Integer.MAX_VALUE;

        // Find the maximum and minimum count values
        for (String word : orderedWords) {
            int count = wordMap.value(word);
            if (count > maxCount) {
                maxCount = count;
            }
            if (count < minCount) {
                minCount = count;
            }
        }

        // Font size that changes based on frequency
        final int minFontSize = 11;
        final int maxFontSize = 48;

        for (String word : orderedWords) {
            int count = wordMap.value(word);

            // Calculate the font size based on the word's count
            int fontSize;
            if (maxCount - minCount == 0) {
                // all words appear the same amount of times
                fontSize = maxCount - minCount;
            } else {
                fontSize = minFontSize + (count - minCount)
                        * (maxFontSize - minFontSize) / (maxCount - minCount);
            }

            fileOut.println("  " + "  " + "  "
                    + "<span style=\"cursor:default\" class=\"f" + fontSize
                    + "\" title=\"count: " + count + "\">" + word + "</span>");
        }

        // HTML file closing tags
        fileOut.println("</p>");
        fileOut.println("</div>");
        fileOut.println("</body>");
        fileOut.println("</html>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // prompt for path to text file
        out.println(
                "Provide a valid path to a text file to count words from: ");
        String textFilePath = in.nextLine();

        // removal of quotations if present in file path
        if (textFilePath.charAt(0) == '"'
                && textFilePath.charAt(textFilePath.length() - 1) == '"') {
            textFilePath = textFilePath.substring(1, textFilePath.length() - 1);
        }

        // prompt for location for HTML file
        out.println(
                "Provide a path to a valid folder to store the final HTML file in: ");
        String htmlFilePath = in.nextLine();

        // removal of quotations if present in file path
        if (htmlFilePath.charAt(0) == '"'
                && htmlFilePath.charAt(htmlFilePath.length() - 1) == '"') {
            htmlFilePath = htmlFilePath.substring(1, htmlFilePath.length() - 1);
        }

        // prompt for the desired name of the output HTML file
        out.println("Provide a desired name for the output HTML file. "
                + "Include .html at the end of the name: ");
        String htmlFileName = in.nextLine();

        // input validation
        while (!(htmlFileName.contains(".html"))) {
            out.println("Your file name does not have .html at the end. "
                    + "Please try again: ");
            htmlFileName = in.nextLine();
        }

        // prompt for number of words to put in the map
        out.println("Provide the number of words to print into the tag cloud:");
        int numberOfWords = Integer.parseInt(in.nextLine());

        // input validation
        while (numberOfWords < 0) {
            out.println("Number of words must be greater than or equal to 0. "
                    + "Try again");
            numberOfWords = Integer.parseInt(in.nextLine());
        }

        SimpleReader textIn = new SimpleReader1L(textFilePath);
        SimpleWriter htmlOut = new SimpleWriter1L(
                htmlFilePath + "/" + htmlFileName);

        // read and count words into Map
        Map<String, Integer> wordMap = wordCountMap(textIn);

        // create a SortingMachine that will sort words in alphabetical order
        SortingMachine<String> sortedWords = new SortingMachine1L<>(
                new Comparator<String>() {
                    @Override
                    public int compare(String s1, String s2) {
                        return s1.compareToIgnoreCase(s2);
                    }
                });

        // create a SortingMachine to sort the map of words by count

        SortingMachine<Map.Pair<String, Integer>> sortByCount = new SortingMachine1L<>(
                new Comparator<Map.Pair<String, Integer>>() {
                    @Override
                    public int compare(Map.Pair<String, Integer> p1,
                            Map.Pair<String, Integer> p2) {
                        return p2.value() - p1.value();
                    }
                });

        sortedListOfWords(wordMap, sortedWords, sortByCount, numberOfWords);

        // create HTML page
        createTag(wordMap, sortedWords, htmlOut, textFilePath, numberOfWords);

        /*
         * Close input and output streams
         */

        textIn.close();
        htmlOut.close();
        in.close();
        out.close();
    }

}
